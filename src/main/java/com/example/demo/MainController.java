package com.example.demo;

import jakarta.annotation.Nullable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
//import org.springframework.http.MediaType;
//import org.springframework.web.bind.annotation.*;

//import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private DataRepository dataRepository;

//    @PostMapping(path="/add") // Map ONLY POST Requests
//    public @ResponseBody String addNewUser (@RequestParam String name
//            , @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setName(name);
//        n.setEmail(email);
//        userRepository.save(n);
//        return "Saved";
//    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Temperatures> getAllData() {
        // This returns a JSON or XML with the users
        return dataRepository.findAll();
    }

    @GetMapping(value = "/temp/lessThan")
    public ResponseEntity<?> getTempLowerThan(@Nullable @RequestParam("temp") Double temp) {
        if (temp == null) {
            return ResponseEntity.notFound().build();
        } else {
            Iterable<Temperatures> result = dataRepository.findTemperaturesByTempIsLessThan(temp);
            return ResponseEntity.ok(result);
        }
    }

    @GetMapping(value = "/temp/greaterThan")
    public ResponseEntity<?> getTempHigherThan(@Nullable @RequestParam("temp") Double temp) {
        if (temp == null) {
            return ResponseEntity.notFound().build();
        } else {
            Iterable<Temperatures> result = dataRepository.findTemperaturesByTempIsGreaterThan(temp);
            return ResponseEntity.ok(result);
        }
    }

    @GetMapping(value = "/temp/between")
    public ResponseEntity<?> getTempBetween(@Nullable @RequestParam("temp1") Double temp1,
                                         @Nullable @RequestParam("temp2") Double temp2) {
        if (temp1 == null || temp2 == null) {
            return ResponseEntity.notFound().build();
        } else {
            Iterable<Temperatures> result = dataRepository.findTemperaturesByTempBetween(temp1, temp2);
            return ResponseEntity.ok(result);
        }
    }

    @GetMapping(value = "/date/before")
    public ResponseEntity<?> getDateBefore(@Nullable @RequestParam("date") String date) {
        if (date == null) {
            return ResponseEntity.notFound().build();
        } else {
            Iterable<Temperatures> result = dataRepository.findTemperaturesByIdBefore(date);
            return ResponseEntity.ok(result);
        }
    }

    @GetMapping(value = "/date/after")
    public ResponseEntity<?> getDateAfter(@Nullable @RequestParam("date") String date) {
        if (date == null) {
            return ResponseEntity.notFound().build();
        } else {
            Iterable<Temperatures> result = dataRepository.findTemperaturesByIdAfter(date);
            return ResponseEntity.ok(result);
        }
    }

    @GetMapping(value = "/date/between")
    public ResponseEntity<?> getDateBetween(@Nullable @RequestParam("date1") String date1,
                                         @Nullable @RequestParam("date2") String date2) {
        if (date1 == null || date2 == null) {
            return ResponseEntity.notFound().build();
        } else {
            Iterable<Temperatures> result = dataRepository.findTemperaturesByIdBetween(date1, date2);
            return ResponseEntity.ok(result);
        }
    }
}